{
	"info": {
		"_postman_id": "11af6913-6571-4b87-9446-aa4de1b4b819",
		"name": "BeerStep API tests Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38271747"
	},
	"item": [
		{
			"name": "POST/USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 success\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"jabo\",\n    \"email\" : \"email@gmail.com\",\n    \"password\" : \"password\",\n    \"total_beers\" : 0,\n    \"total_steps\" : 0,\n    \"steps_needed\" : 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET/USERS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET/USERID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users/jabo",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						"jabo"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT/USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"John\",\n    \"email\" : \"email@gmail.com\",\n    \"password\" : \"password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/users/jabo",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						"jabo"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET/USERID/POSTOVERRIDE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users/John?_method=GET",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						"John"
					],
					"query": [
						{
							"key": "_method",
							"value": "GET"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE/USERS/USERNAME/SQUADS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Create user\r",
							"pm.sendRequest({\r",
							"    url: 'http://localhost:3000/api/users',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            username: 'john_doe12',\r",
							"            email: 'john6@example.com',\r",
							"            password: 'password123'\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(err);\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    const userId = res.json().user._id; \r",
							"\r",
							"    \r",
							"    pm.environment.set('username', 'john_doe12');\r",
							"\r",
							"    \r",
							"    if (userId) {\r",
							"        \r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:3000/api/squads',\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    squadName: 'Team Awesome5',\r",
							"                    created_by: userId \r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                console.error(err);\r",
							"                return;\r",
							"            }\r",
							"\r",
							"            console.log(\"Squad created successfully.\");\r",
							"        });\r",
							"    } else {\r",
							"        console.error(\"User ID not found, unable to create squad.\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users/:username/squads",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						":username",
						"squads"
					],
					"variable": [
						{
							"key": "username",
							"value": "{{username}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE/USERID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users/John",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						"John"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE/USERS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH/USER_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"total_beers\": 1,\n    \"total_steps\": 0,\n    \"steps_needed\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/users/jabo1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						"jabo1"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST/SQUADS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Create the first user\r",
							"pm.sendRequest({\r",
							"    url: 'http://localhost:3000/api/users',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            username: 'postsquads',\r",
							"            email: 'post_squads@example.com',\r",
							"            password: 'password123'\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(err);\r",
							"        return;\r",
							"    }\r",
							"    \r",
							"    // Get the user ID from the response and save it as an environment variable\r",
							"    const userId = res.json().user._id; \r",
							"    console.log('Created User ID:', userId);\r",
							"    const username = res.json().user.username;\r",
							"    console.log('Created Username:', username);\r",
							"    pm.environment.set('createdUsername2', username); // Save Username in environment variable\r",
							"    pm.environment.set('createdUserId', userId);});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 201 is for successful\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"squadName\" : \"jabodabo\",\r\n    \"created_by\": \"{{createdUserId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/squads",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"squads"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH/SQUADS/ID/USERS/USERNAME",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"",
							"pm.test(\"Status code 200 is for successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Create the first user\r",
							"pm.sendRequest({\r",
							"    url: 'http://localhost:3000/api/users',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            username: 'john_doe',\r",
							"            email: 'john@example.com',\r",
							"            password: 'password123'\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(err);\r",
							"        return;\r",
							"    }\r",
							"    \r",
							"    // Get the user ID from the response and save it as an environment variable\r",
							"    const userId = res.json().user._id; \r",
							"    console.log('Created User ID:', userId);\r",
							"    pm.environment.set('createdUserId', userId); // Save user ID in environment variable\r",
							"\r",
							"    // Create a squad\r",
							"    pm.sendRequest({\r",
							"        url: 'http://localhost:3000/api/squads',\r",
							"        method: 'POST',\r",
							"        header: {\r",
							"            'Content-Type': 'application/json'\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                squadName: 'Team Awesome',\r",
							"                created_by: userId // Use the created user ID directly here\r",
							"            })\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.error(err);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        // Get the squad ID from the response and save it as an environment variable\r",
							"        const squadId = res.json().squad._id; \r",
							"        console.log('Created Squad ID:', squadId);\r",
							"        pm.environment.set('createdSquadId', squadId); // Save squad ID in environment variable\r",
							"\r",
							"        // Now create the second user\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:3000/api/users',\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    username: 'johnny',\r",
							"                    email: 'johnny@example.com',\r",
							"                    password: 'password123'\r",
							"                })\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                console.error(err);\r",
							"                return;\r",
							"            }\r",
							"\r",
							"            const invite_username = res.json().user.username; \r",
							"            console.log('Created Invite Username:', invite_username);\r",
							"            \r",
							"            // Save the user ID in an environment variable\r",
							"            pm.environment.set('inviteUsername', invite_username);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/squads/:id/users/:username",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"squads",
						":id",
						"users",
						":username"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{createdSquadId}}"
						},
						{
							"key": "username",
							"value": "{{inviteUsername}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE/SQUADS/ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Create the first user\r",
							"pm.sendRequest({\r",
							"    url: 'http://localhost:3000/api/users',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            username: 'john_doe4',\r",
							"            email: 'john4@example.com',\r",
							"            password: 'password123'\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(err);\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    // Create a squad\r",
							"    pm.sendRequest({\r",
							"        url: 'http://localhost:3000/api/squads',\r",
							"        method: 'POST',\r",
							"        header: {\r",
							"            'Content-Type': 'application/json'\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                squadName: 'Team Awesome4',\r",
							"                created_by: userId\r",
							"            })\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.error(err);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        // Get the squad ID from the response and save it as an environment variable\r",
							"        const squadId = res.json().squad._id; \r",
							"        console.log('Created Squad ID:', squadId);\r",
							"        pm.environment.set('createdSquadId', squadId); // Save squad ID in environment variable\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200 is for successful\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/squads/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"squads",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{createdSquadId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET/SQUADS/ID/USERS",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Create the first user\r",
							"pm.sendRequest({\r",
							"    url: 'http://localhost:3000/api/users',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            username: 'john_doe3',\r",
							"            email: 'john3@example.com',\r",
							"            password: 'password123'\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(err);\r",
							"        return;\r",
							"    }\r",
							"    \r",
							"    // Get the user ID from the response and save it as an environment variable\r",
							"    const userId = res.json().user._id; \r",
							"    console.log('Created User ID:', userId);\r",
							"    const username = res.json().user.username;\r",
							"    console.log('Created Username:', username);\r",
							"    pm.environment.set('createdUsername2', username); // Save Username in environment variable\r",
							"    pm.environment.set('createdUserId2', userId); // Save user ID in environment variable\r",
							"\r",
							"    // Create a squad\r",
							"    pm.sendRequest({\r",
							"        url: 'http://localhost:3000/api/squads',\r",
							"        method: 'POST',\r",
							"        header: {\r",
							"            'Content-Type': 'application/json'\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                squadName: 'Team Awesome3',\r",
							"                created_by: userId\r",
							"            })\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.error(err);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        // Get the squad ID from the response and save it as an environment variable\r",
							"        const squadId = res.json().squad._id; \r",
							"        console.log('Created Squad ID:', squadId);\r",
							"        pm.environment.set('createdSquadId', squadId); // Save squad ID in environment variable\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200 is for successful\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/squads/:id/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"squads",
						":id",
						"users"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{createdSquadId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE/SQUADS/ID/USERS/USERNAME",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Create the first user\r",
							"pm.sendRequest({\r",
							"    url: 'http://localhost:3000/api/users',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            username: 'john_doe2',\r",
							"            email: 'john2@example.com',\r",
							"            password: 'password123'\r",
							"        })\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    if (err) {\r",
							"        console.error(err);\r",
							"        return;\r",
							"    }\r",
							"    \r",
							"    // Get the user ID from the response and save it as an environment variable\r",
							"    const userId = res.json().user._id; \r",
							"    console.log('Created User ID:', userId);\r",
							"    const username = res.json().user.username;\r",
							"    console.log('Created Username:', username);\r",
							"    pm.environment.set('createdUsername2', username); // Save Username in environment variable\r",
							"    pm.environment.set('createdUserId2', userId); // Save user ID in environment variable\r",
							"\r",
							"    // Create a squad\r",
							"    pm.sendRequest({\r",
							"        url: 'http://localhost:3000/api/squads',\r",
							"        method: 'POST',\r",
							"        header: {\r",
							"            'Content-Type': 'application/json'\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                squadName: 'Team Awesome2',\r",
							"                created_by: userId\r",
							"            })\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.error(err);\r",
							"            return;\r",
							"        }\r",
							"\r",
							"        // Get the squad ID from the response and save it as an environment variable\r",
							"        const squadId = res.json().squad._id; \r",
							"        console.log('Created Squad ID:', squadId);\r",
							"        pm.environment.set('createdSquadId2', squadId); // Save squad ID in environment variable\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200 is for successful\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/squads/:id/users/:username",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"squads",
						":id",
						"users",
						":username"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{createdSquadId2}}"
						},
						{
							"key": "username",
							"value": "{{createdUsername2}}"
						}
					]
				}
			},
			"response": []
		},
			{
				"name": "POST/LEADERBOARD",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Status code is 400 for bad request\", function () {",
								"    pm.response.to.have.status(400);",
								"});"
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "POST",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n    \"leaderboard_id\": \"67110894f1a0300a5b76b970\",\n    \"month\": \"January\"\n}",
						"options": {
							"raw": {
								"language": "json"
							}
						}
					},
					"url": {
						"raw": "http://localhost:3000/api/leaderboards",
						"protocol": "http",
						"host": [
							"localhost"
						],
						"port": "3000",
						"path": [
							"api",
							"leaderboards"
						]
					}
				},
				"response": []
			},
			{
				"name": "DELETE/LEADERBOARDS",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Status code is 200 for success\", function () {",
								"    pm.response.to.have.status(200);",
								"});"
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "DELETE",
					"header": [],
					"url": {
						"raw": "http://localhost:3000/api/leaderboards",
						"protocol": "http",
						"host": [
							"localhost"
						],
						"port": "3000",
						"path": [
							"api",
							"leaderboards"
						]
					}
				},
				"response": []
			},
			{
				"name": "GET/LEADERBOARDS",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Status code is 200 for success\", function () {",
								"    pm.response.to.have.status(200);",
								"});"
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "GET",
					"header": [],
					"url": {
						"raw": "http://localhost:3000/api/leaderboards",
						"protocol": "http",
						"host": [
							"localhost"
						],
						"port": "3000",
						"path": [
							"api",
							"leaderboards"
						]
					}
				},
				"response": []
			},
			{
				"name": "GET/LEADERBOARD_ID",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Status code is 404 for not found\", function () {",
								"    pm.response.to.have.status(404);",
								"});"
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "GET",
					"header": [],
					"url": {
						"raw": "http://localhost:3000/api/leaderboards/67110894f1a0300a5b76b970",
						"protocol": "http",
						"host": [
							"localhost"
						],
						"port": "3000",
						"path": [
							"api",
							"leaderboards",
							"67110894f1a0300a5b76b970"
						]
					}
				},
				"response": []
			},
			{
				"name": "PUT/LEADERBOARD_ID",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Status code is 200 for successful update\", function () {",
								"    pm.response.to.have.status(200);",
								"});"
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "PUT",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n    \"leaderboard_id\": \"67110894f1a0300a5b76b970\",\n    \"month\": \"January\"\n}",
						"options": {
							"raw": {
								"language": "json"
							}
						}
					},
					"url": {
						"raw": "http://localhost:3000/api/leaderboards/67110894f1a0300a5b76b970",
						"protocol": "http",
						"host": [
							"localhost"
						],
						"port": "3000",
						"path": [
							"api",
							"leaderboards",
							"67110894f1a0300a5b76b970"
						]
					}
				},
				"response": []
			},
			{
				"name": "DELETE/LEADERBOARD_ID",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Status code is 404 for not found\", function () {",
								"    pm.response.to.have.status(404);",
								"});"
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "DELETE",
					"header": [],
					"url": {
						"raw": "http://localhost:3000/api/leaderboards/67110894f1a0300a5b76b970",
						"protocol": "http",
						"host": [
							"localhost"
						],
						"port": "3000",
						"path": [
							"api",
							"leaderboards",
							"67110894f1a0300a5b76b970"
						]
					}
				},
				"response": []
			},
			{
				"name": "PATCH/LEADERBOARD_ID",
				"event": [
					{
						"listen": "test",
						"script": {
							"exec": [
								"pm.test(\"Status code is 404 for not found\", function () {",
								"    pm.response.to.have.status(404);",
								"});"
							],
							"type": "text/javascript"
						}
					}
				],
				"request": {
					"method": "PATCH",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"body": {
						"mode": "raw",
						"raw": "{\n    \"leaderboard_id\": \"67110894f1a0300a5b76b970\",\n    \"month\": \"January\"\n}",
						"options": {
							"raw": {
								"language": "json"
							}
						}
					},
					"url": {
						"raw": "http://localhost:3000/api/leaderboards/67110894f1a0300a5b76b970",
						"protocol": "http",
						"host": [
							"localhost"
						],
						"port": "3000",
						"path": [
							"api",
							"leaderboards",
							"67110894f1a0300a5b76b970"
						]
					}
				},
				"response": []
			},
		
		
		{
			"name": "POST/MILESTONE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\n    \"title\" : \"Gamers\",\n    \"description\" : \"WOaw beers\",\n    \"beers\" : 5,\n    \"steps\" : 5000\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/users/jabo1/milestones",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						"jabo1",
						"milestones"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET/MILESTONES FOR USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users/jabo1/milestones",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						"jabo1",
						"milestones"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET MILESTONE _ ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/milestones/670ceccc8a4b7599251800a9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"milestones",
						"670ceccc8a4b7599251800a9"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT MILESTONE ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\n    \"title\" : \"Non-Gamers\",\n    \"description\" : \"WOaw beers\",\n    \"beers\" : 5,\n    \"steps\" : 5000\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/milestones/670ceccc8a4b7599251800a9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"milestones",
						"670ceccc8a4b7599251800a9"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE MILESTONE ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/milestones/670ceccc8a4b7599251800a9",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"milestones",
						"670ceccc8a4b7599251800a9"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE ALL MILESTONES",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 success\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/milestones",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"milestones"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET ALL MILESTONES",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/milestones",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"milestones"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH MILESTONE ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\n    \"title\" : \"COOL-Gamers\",\n    \"description\" : \"w beers\",\n    \"beers\" : 52,\n    \"steps\" : 50200\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/milestones/670cfa4addb5b774917c210b",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"milestones",
						"670cfa4addb5b774917c210b"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE USERS MILESTONES",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users/jabo1/milestones",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						"jabo1",
						"milestones"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Squads SquadSpace Forum by Squad Name",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "POST Message in SquadSpace",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 success\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"jabo\",\n    \"email\" : \"email@gmail.com\",\n    \"password\" : \"password\",\n    \"total_beers\" : 0,\n    \"total_steps\" : 0,\n    \"steps_needed\" : 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		}
	]
}