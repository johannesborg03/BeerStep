{
	"info": {
		"_postman_id": "719b484e-b839-4d74-ace4-4fd724621689",
		"name": "BeerStep API tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32895985"
	},
	"item": [
		{
			"name": "POST/USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 success\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"jabo\",\n    \"email\" : \"email@gmail.com\",\n    \"password\" : \"password\",\n    \"total_beers\" : 0,\n    \"total_steps\" : 0,\n    \"steps_needed\" : 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET/USERS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET/USERID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users/jabo",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						"jabo"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT/USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"John\",\n    \"email\" : \"email@gmail.com\",\n    \"password\" : \"password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/users/jabo",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						"jabo"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET/USERID/POSTOVERRIDE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users/John?_method=GET",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						"John"
					],
					"query": [
						{
							"key": "_method",
							"value": "GET"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE/USERID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users/John",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						"John"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE/USERS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH/USER_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \n    \"userID\" : 10,\n    \"username\" : \"Johnna\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/users/John",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"users",
						"John"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST INVITE USER TO SQUAD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"",
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Function to create a user\r",
							"function createUser() {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:3000/api/users', // Adjust the URL to your user creation endpoint\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    username: 'JohnDoe', // Example username\r",
							"                    email: 'johndoe@example.com', // Example email\r",
							"                    password: 'password123' // Example password\r",
							"                })\r",
							"            }\r",
							"        }, (err, res) => {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                const user = res.json();\r",
							"                pm.environment.set('userId', user._id); // Store user ID in an environment variable\r",
							"                resolve(user);\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"// Function to create a squad using the created user\r",
							"function createSquad(userId) {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest({\r",
							"            url: 'http://localhost:3000/api/squads', // Adjust the URL to your squad creation endpoint\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'application/json'\r",
							"            },\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: JSON.stringify({\r",
							"                    name: 'Squad Alpha', // Example squad name\r",
							"                    created_by: userId, // Use the userId we just created\r",
							"                    users: [userId] // Add the same user to the squad\r",
							"                })\r",
							"            }\r",
							"        }, (err, res) => {\r",
							"            if (err) {\r",
							"                reject(err);\r",
							"            } else {\r",
							"                const squad = res.json();\r",
							"                pm.environment.set('squadId', squad._id); // Store squad ID in an environment variable\r",
							"                resolve(squad);\r",
							"            }\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"createUser()\r",
							"    .then(user => {\r",
							"        return createSquad(user._id);\r",
							"    })\r",
							"    .catch(err => {\r",
							"        console.error('Error creating user or squad:', err);\r",
							"        pm.environment.set('error', err);\r",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"squadId\": \"{{squadId}}\", // Use the squadId created in the pre-request script\n    \"username\": \"JohnDoe\" // Username of the user\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/squads/invite",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"squads",
						"invite"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST/LEADERBOARD",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 for bad request\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"leaderboard_id\" : 2,\n    \"month\" : \"January\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/leaderboards",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"leaderboards"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE/LEADERBOARDS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/leaderboards",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"leaderboards"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET/LEADERBOARDS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 for success\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/leaderboards",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"leaderboards"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET/LEADERBOARD_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/leaderboards/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"leaderboards",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT/LEADERBOARD_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"leaderboard_id\" : 1,\n    \"month\" : \"January\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/leaderboards/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"leaderboards",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE/LEADERBOARD_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/leaderboards/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"leaderboards",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH/LEADERBOARD_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404 for not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"leaderboard_id\" : 2,\n    \"month\" : \"January\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/leaderboards/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"leaderboards",
						"1"
					]
				}
			},
			"response": []
		}
	]
}